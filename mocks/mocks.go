// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/allora-network/allora-sdk-go/config"
	"github.com/allora-network/allora-sdk-go/gen/interfaces"
	"github.com/brynbellomy/go-utils"
	"github.com/cometbft/cometbft/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIClient creates a new instance of MockIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIClient {
	mock := &MockIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIClient is an autogenerated mock type for the IClient type
type MockIClient struct {
	mock.Mock
}

type MockIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIClient) EXPECT() *MockIClient_Expecter {
	return &MockIClient_Expecter{mock: &_m.Mock}
}

// Auth provides a mock function for the type MockIClient
func (_mock *MockIClient) Auth() interfaces.AuthClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 interfaces.AuthClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.AuthClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.AuthClient)
		}
	}
	return r0
}

// MockIClient_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type MockIClient_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Auth() *MockIClient_Auth_Call {
	return &MockIClient_Auth_Call{Call: _e.mock.On("Auth")}
}

func (_c *MockIClient_Auth_Call) Run(run func()) *MockIClient_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Auth_Call) Return(authClient interfaces.AuthClient) *MockIClient_Auth_Call {
	_c.Call.Return(authClient)
	return _c
}

func (_c *MockIClient_Auth_Call) RunAndReturn(run func() interfaces.AuthClient) *MockIClient_Auth_Call {
	_c.Call.Return(run)
	return _c
}

// Authz provides a mock function for the type MockIClient
func (_mock *MockIClient) Authz() interfaces.AuthzClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Authz")
	}

	var r0 interfaces.AuthzClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.AuthzClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.AuthzClient)
		}
	}
	return r0
}

// MockIClient_Authz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authz'
type MockIClient_Authz_Call struct {
	*mock.Call
}

// Authz is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Authz() *MockIClient_Authz_Call {
	return &MockIClient_Authz_Call{Call: _e.mock.On("Authz")}
}

func (_c *MockIClient_Authz_Call) Run(run func()) *MockIClient_Authz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Authz_Call) Return(authzClient interfaces.AuthzClient) *MockIClient_Authz_Call {
	_c.Call.Return(authzClient)
	return _c
}

func (_c *MockIClient_Authz_Call) RunAndReturn(run func() interfaces.AuthzClient) *MockIClient_Authz_Call {
	_c.Call.Return(run)
	return _c
}

// Bank provides a mock function for the type MockIClient
func (_mock *MockIClient) Bank() interfaces.BankClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bank")
	}

	var r0 interfaces.BankClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.BankClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.BankClient)
		}
	}
	return r0
}

// MockIClient_Bank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bank'
type MockIClient_Bank_Call struct {
	*mock.Call
}

// Bank is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Bank() *MockIClient_Bank_Call {
	return &MockIClient_Bank_Call{Call: _e.mock.On("Bank")}
}

func (_c *MockIClient_Bank_Call) Run(run func()) *MockIClient_Bank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Bank_Call) Return(bankClient interfaces.BankClient) *MockIClient_Bank_Call {
	_c.Call.Return(bankClient)
	return _c
}

func (_c *MockIClient_Bank_Call) RunAndReturn(run func() interfaces.BankClient) *MockIClient_Bank_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockIClient
func (_mock *MockIClient) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockIClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Close() *MockIClient_Close_Call {
	return &MockIClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockIClient_Close_Call) Run(run func()) *MockIClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Close_Call) Return(err error) *MockIClient_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIClient_Close_Call) RunAndReturn(run func() error) *MockIClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Consensus provides a mock function for the type MockIClient
func (_mock *MockIClient) Consensus() interfaces.ConsensusClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Consensus")
	}

	var r0 interfaces.ConsensusClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.ConsensusClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ConsensusClient)
		}
	}
	return r0
}

// MockIClient_Consensus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consensus'
type MockIClient_Consensus_Call struct {
	*mock.Call
}

// Consensus is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Consensus() *MockIClient_Consensus_Call {
	return &MockIClient_Consensus_Call{Call: _e.mock.On("Consensus")}
}

func (_c *MockIClient_Consensus_Call) Run(run func()) *MockIClient_Consensus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Consensus_Call) Return(consensusClient interfaces.ConsensusClient) *MockIClient_Consensus_Call {
	_c.Call.Return(consensusClient)
	return _c
}

func (_c *MockIClient_Consensus_Call) RunAndReturn(run func() interfaces.ConsensusClient) *MockIClient_Consensus_Call {
	_c.Call.Return(run)
	return _c
}

// Distribution provides a mock function for the type MockIClient
func (_mock *MockIClient) Distribution() interfaces.DistributionClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Distribution")
	}

	var r0 interfaces.DistributionClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.DistributionClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.DistributionClient)
		}
	}
	return r0
}

// MockIClient_Distribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Distribution'
type MockIClient_Distribution_Call struct {
	*mock.Call
}

// Distribution is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Distribution() *MockIClient_Distribution_Call {
	return &MockIClient_Distribution_Call{Call: _e.mock.On("Distribution")}
}

func (_c *MockIClient_Distribution_Call) Run(run func()) *MockIClient_Distribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Distribution_Call) Return(distributionClient interfaces.DistributionClient) *MockIClient_Distribution_Call {
	_c.Call.Return(distributionClient)
	return _c
}

func (_c *MockIClient_Distribution_Call) RunAndReturn(run func() interfaces.DistributionClient) *MockIClient_Distribution_Call {
	_c.Call.Return(run)
	return _c
}

// Emissions provides a mock function for the type MockIClient
func (_mock *MockIClient) Emissions() interfaces.EmissionsClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Emissions")
	}

	var r0 interfaces.EmissionsClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.EmissionsClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.EmissionsClient)
		}
	}
	return r0
}

// MockIClient_Emissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emissions'
type MockIClient_Emissions_Call struct {
	*mock.Call
}

// Emissions is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Emissions() *MockIClient_Emissions_Call {
	return &MockIClient_Emissions_Call{Call: _e.mock.On("Emissions")}
}

func (_c *MockIClient_Emissions_Call) Run(run func()) *MockIClient_Emissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Emissions_Call) Return(emissionsClient interfaces.EmissionsClient) *MockIClient_Emissions_Call {
	_c.Call.Return(emissionsClient)
	return _c
}

func (_c *MockIClient_Emissions_Call) RunAndReturn(run func() interfaces.EmissionsClient) *MockIClient_Emissions_Call {
	_c.Call.Return(run)
	return _c
}

// Evidence provides a mock function for the type MockIClient
func (_mock *MockIClient) Evidence() interfaces.EvidenceClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Evidence")
	}

	var r0 interfaces.EvidenceClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.EvidenceClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.EvidenceClient)
		}
	}
	return r0
}

// MockIClient_Evidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evidence'
type MockIClient_Evidence_Call struct {
	*mock.Call
}

// Evidence is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Evidence() *MockIClient_Evidence_Call {
	return &MockIClient_Evidence_Call{Call: _e.mock.On("Evidence")}
}

func (_c *MockIClient_Evidence_Call) Run(run func()) *MockIClient_Evidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Evidence_Call) Return(evidenceClient interfaces.EvidenceClient) *MockIClient_Evidence_Call {
	_c.Call.Return(evidenceClient)
	return _c
}

func (_c *MockIClient_Evidence_Call) RunAndReturn(run func() interfaces.EvidenceClient) *MockIClient_Evidence_Call {
	_c.Call.Return(run)
	return _c
}

// Feegrant provides a mock function for the type MockIClient
func (_mock *MockIClient) Feegrant() interfaces.FeegrantClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Feegrant")
	}

	var r0 interfaces.FeegrantClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.FeegrantClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.FeegrantClient)
		}
	}
	return r0
}

// MockIClient_Feegrant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Feegrant'
type MockIClient_Feegrant_Call struct {
	*mock.Call
}

// Feegrant is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Feegrant() *MockIClient_Feegrant_Call {
	return &MockIClient_Feegrant_Call{Call: _e.mock.On("Feegrant")}
}

func (_c *MockIClient_Feegrant_Call) Run(run func()) *MockIClient_Feegrant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Feegrant_Call) Return(feegrantClient interfaces.FeegrantClient) *MockIClient_Feegrant_Call {
	_c.Call.Return(feegrantClient)
	return _c
}

func (_c *MockIClient_Feegrant_Call) RunAndReturn(run func() interfaces.FeegrantClient) *MockIClient_Feegrant_Call {
	_c.Call.Return(run)
	return _c
}

// GetEndpointURL provides a mock function for the type MockIClient
func (_mock *MockIClient) GetEndpointURL() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIClient_GetEndpointURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEndpointURL'
type MockIClient_GetEndpointURL_Call struct {
	*mock.Call
}

// GetEndpointURL is a helper method to define mock.On call
func (_e *MockIClient_Expecter) GetEndpointURL() *MockIClient_GetEndpointURL_Call {
	return &MockIClient_GetEndpointURL_Call{Call: _e.mock.On("GetEndpointURL")}
}

func (_c *MockIClient_GetEndpointURL_Call) Run(run func()) *MockIClient_GetEndpointURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_GetEndpointURL_Call) Return(s string) *MockIClient_GetEndpointURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIClient_GetEndpointURL_Call) RunAndReturn(run func() string) *MockIClient_GetEndpointURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealthStatus provides a mock function for the type MockIClient
func (_mock *MockIClient) GetHealthStatus() map[string]any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHealthStatus")
	}

	var r0 map[string]any
	if returnFunc, ok := ret.Get(0).(func() map[string]any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	return r0
}

// MockIClient_GetHealthStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealthStatus'
type MockIClient_GetHealthStatus_Call struct {
	*mock.Call
}

// GetHealthStatus is a helper method to define mock.On call
func (_e *MockIClient_Expecter) GetHealthStatus() *MockIClient_GetHealthStatus_Call {
	return &MockIClient_GetHealthStatus_Call{Call: _e.mock.On("GetHealthStatus")}
}

func (_c *MockIClient_GetHealthStatus_Call) Run(run func()) *MockIClient_GetHealthStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_GetHealthStatus_Call) Return(stringToV map[string]any) *MockIClient_GetHealthStatus_Call {
	_c.Call.Return(stringToV)
	return _c
}

func (_c *MockIClient_GetHealthStatus_Call) RunAndReturn(run func() map[string]any) *MockIClient_GetHealthStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocol provides a mock function for the type MockIClient
func (_mock *MockIClient) GetProtocol() config.Protocol {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProtocol")
	}

	var r0 config.Protocol
	if returnFunc, ok := ret.Get(0).(func() config.Protocol); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(config.Protocol)
	}
	return r0
}

// MockIClient_GetProtocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocol'
type MockIClient_GetProtocol_Call struct {
	*mock.Call
}

// GetProtocol is a helper method to define mock.On call
func (_e *MockIClient_Expecter) GetProtocol() *MockIClient_GetProtocol_Call {
	return &MockIClient_GetProtocol_Call{Call: _e.mock.On("GetProtocol")}
}

func (_c *MockIClient_GetProtocol_Call) Run(run func()) *MockIClient_GetProtocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_GetProtocol_Call) Return(protocol config.Protocol) *MockIClient_GetProtocol_Call {
	_c.Call.Return(protocol)
	return _c
}

func (_c *MockIClient_GetProtocol_Call) RunAndReturn(run func() config.Protocol) *MockIClient_GetProtocol_Call {
	_c.Call.Return(run)
	return _c
}

// Gov provides a mock function for the type MockIClient
func (_mock *MockIClient) Gov() interfaces.GovClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Gov")
	}

	var r0 interfaces.GovClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.GovClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.GovClient)
		}
	}
	return r0
}

// MockIClient_Gov_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gov'
type MockIClient_Gov_Call struct {
	*mock.Call
}

// Gov is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Gov() *MockIClient_Gov_Call {
	return &MockIClient_Gov_Call{Call: _e.mock.On("Gov")}
}

func (_c *MockIClient_Gov_Call) Run(run func()) *MockIClient_Gov_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Gov_Call) Return(govClient interfaces.GovClient) *MockIClient_Gov_Call {
	_c.Call.Return(govClient)
	return _c
}

func (_c *MockIClient_Gov_Call) RunAndReturn(run func() interfaces.GovClient) *MockIClient_Gov_Call {
	_c.Call.Return(run)
	return _c
}

// Mint provides a mock function for the type MockIClient
func (_mock *MockIClient) Mint() interfaces.MintClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Mint")
	}

	var r0 interfaces.MintClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.MintClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.MintClient)
		}
	}
	return r0
}

// MockIClient_Mint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mint'
type MockIClient_Mint_Call struct {
	*mock.Call
}

// Mint is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Mint() *MockIClient_Mint_Call {
	return &MockIClient_Mint_Call{Call: _e.mock.On("Mint")}
}

func (_c *MockIClient_Mint_Call) Run(run func()) *MockIClient_Mint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Mint_Call) Return(mintClient interfaces.MintClient) *MockIClient_Mint_Call {
	_c.Call.Return(mintClient)
	return _c
}

func (_c *MockIClient_Mint_Call) RunAndReturn(run func() interfaces.MintClient) *MockIClient_Mint_Call {
	_c.Call.Return(run)
	return _c
}

// Node provides a mock function for the type MockIClient
func (_mock *MockIClient) Node() interfaces.NodeClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Node")
	}

	var r0 interfaces.NodeClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.NodeClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.NodeClient)
		}
	}
	return r0
}

// MockIClient_Node_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Node'
type MockIClient_Node_Call struct {
	*mock.Call
}

// Node is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Node() *MockIClient_Node_Call {
	return &MockIClient_Node_Call{Call: _e.mock.On("Node")}
}

func (_c *MockIClient_Node_Call) Run(run func()) *MockIClient_Node_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Node_Call) Return(nodeClient interfaces.NodeClient) *MockIClient_Node_Call {
	_c.Call.Return(nodeClient)
	return _c
}

func (_c *MockIClient_Node_Call) RunAndReturn(run func() interfaces.NodeClient) *MockIClient_Node_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function for the type MockIClient
func (_mock *MockIClient) Params() interfaces.ParamsClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 interfaces.ParamsClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.ParamsClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ParamsClient)
		}
	}
	return r0
}

// MockIClient_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type MockIClient_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Params() *MockIClient_Params_Call {
	return &MockIClient_Params_Call{Call: _e.mock.On("Params")}
}

func (_c *MockIClient_Params_Call) Run(run func()) *MockIClient_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Params_Call) Return(paramsClient interfaces.ParamsClient) *MockIClient_Params_Call {
	_c.Call.Return(paramsClient)
	return _c
}

func (_c *MockIClient_Params_Call) RunAndReturn(run func() interfaces.ParamsClient) *MockIClient_Params_Call {
	_c.Call.Return(run)
	return _c
}

// Slashing provides a mock function for the type MockIClient
func (_mock *MockIClient) Slashing() interfaces.SlashingClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Slashing")
	}

	var r0 interfaces.SlashingClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.SlashingClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.SlashingClient)
		}
	}
	return r0
}

// MockIClient_Slashing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Slashing'
type MockIClient_Slashing_Call struct {
	*mock.Call
}

// Slashing is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Slashing() *MockIClient_Slashing_Call {
	return &MockIClient_Slashing_Call{Call: _e.mock.On("Slashing")}
}

func (_c *MockIClient_Slashing_Call) Run(run func()) *MockIClient_Slashing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Slashing_Call) Return(slashingClient interfaces.SlashingClient) *MockIClient_Slashing_Call {
	_c.Call.Return(slashingClient)
	return _c
}

func (_c *MockIClient_Slashing_Call) RunAndReturn(run func() interfaces.SlashingClient) *MockIClient_Slashing_Call {
	_c.Call.Return(run)
	return _c
}

// Staking provides a mock function for the type MockIClient
func (_mock *MockIClient) Staking() interfaces.StakingClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Staking")
	}

	var r0 interfaces.StakingClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.StakingClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.StakingClient)
		}
	}
	return r0
}

// MockIClient_Staking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Staking'
type MockIClient_Staking_Call struct {
	*mock.Call
}

// Staking is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Staking() *MockIClient_Staking_Call {
	return &MockIClient_Staking_Call{Call: _e.mock.On("Staking")}
}

func (_c *MockIClient_Staking_Call) Run(run func()) *MockIClient_Staking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Staking_Call) Return(stakingClient interfaces.StakingClient) *MockIClient_Staking_Call {
	_c.Call.Return(stakingClient)
	return _c
}

func (_c *MockIClient_Staking_Call) RunAndReturn(run func() interfaces.StakingClient) *MockIClient_Staking_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockIClient
func (_mock *MockIClient) Status(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIClient_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockIClient_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIClient_Expecter) Status(ctx interface{}) *MockIClient_Status_Call {
	return &MockIClient_Status_Call{Call: _e.mock.On("Status", ctx)}
}

func (_c *MockIClient_Status_Call) Run(run func(ctx context.Context)) *MockIClient_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIClient_Status_Call) Return(err error) *MockIClient_Status_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIClient_Status_Call) RunAndReturn(run func(ctx context.Context) error) *MockIClient_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockIClient
func (_mock *MockIClient) Subscribe(mb *utils.Mailbox[types.TMEventData], query string) {
	_mock.Called(mb, query)
	return
}

// MockIClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockIClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - mb *utils.Mailbox[types.TMEventData]
//   - query string
func (_e *MockIClient_Expecter) Subscribe(mb interface{}, query interface{}) *MockIClient_Subscribe_Call {
	return &MockIClient_Subscribe_Call{Call: _e.mock.On("Subscribe", mb, query)}
}

func (_c *MockIClient_Subscribe_Call) Run(run func(mb *utils.Mailbox[types.TMEventData], query string)) *MockIClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *utils.Mailbox[types.TMEventData]
		if args[0] != nil {
			arg0 = args[0].(*utils.Mailbox[types.TMEventData])
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIClient_Subscribe_Call) Return() *MockIClient_Subscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIClient_Subscribe_Call) RunAndReturn(run func(mb *utils.Mailbox[types.TMEventData], query string)) *MockIClient_Subscribe_Call {
	_c.Run(run)
	return _c
}

// Tendermint provides a mock function for the type MockIClient
func (_mock *MockIClient) Tendermint() interfaces.TendermintClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tendermint")
	}

	var r0 interfaces.TendermintClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.TendermintClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.TendermintClient)
		}
	}
	return r0
}

// MockIClient_Tendermint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tendermint'
type MockIClient_Tendermint_Call struct {
	*mock.Call
}

// Tendermint is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Tendermint() *MockIClient_Tendermint_Call {
	return &MockIClient_Tendermint_Call{Call: _e.mock.On("Tendermint")}
}

func (_c *MockIClient_Tendermint_Call) Run(run func()) *MockIClient_Tendermint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Tendermint_Call) Return(tendermintClient interfaces.TendermintClient) *MockIClient_Tendermint_Call {
	_c.Call.Return(tendermintClient)
	return _c
}

func (_c *MockIClient_Tendermint_Call) RunAndReturn(run func() interfaces.TendermintClient) *MockIClient_Tendermint_Call {
	_c.Call.Return(run)
	return _c
}

// Tx provides a mock function for the type MockIClient
func (_mock *MockIClient) Tx() interfaces.TxClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tx")
	}

	var r0 interfaces.TxClient
	if returnFunc, ok := ret.Get(0).(func() interfaces.TxClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.TxClient)
		}
	}
	return r0
}

// MockIClient_Tx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tx'
type MockIClient_Tx_Call struct {
	*mock.Call
}

// Tx is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Tx() *MockIClient_Tx_Call {
	return &MockIClient_Tx_Call{Call: _e.mock.On("Tx")}
}

func (_c *MockIClient_Tx_Call) Run(run func()) *MockIClient_Tx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Tx_Call) Return(txClient interfaces.TxClient) *MockIClient_Tx_Call {
	_c.Call.Return(txClient)
	return _c
}

func (_c *MockIClient_Tx_Call) RunAndReturn(run func() interfaces.TxClient) *MockIClient_Tx_Call {
	_c.Call.Return(run)
	return _c
}
